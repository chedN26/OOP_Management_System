/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.oop_management_system;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.List;
/**
 *
 * @author chedn
 */
public class Main extends javax.swing.JFrame { // Inheritance; uses "extends" to customize the JFrame
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        /** 
         * Encapsulation (setters)
         * Sets the initial properties of txtConsume and txtTotal
         */ 
        txtWaterConsume.setBackground(java.awt.Color.decode("#D3D3D3"));
        txtWaterTotal.setBackground(java.awt.Color.decode("#D3D3D3"));
        txtElecConsume.setBackground(java.awt.Color.decode("#D3D3D3"));
        txtElecTotal.setBackground(java.awt.Color.decode("#D3D3D3"));
        txtElecConsume.setFocusable(false);
        txtWaterConsume.setFocusable(false);
        txtElecTotal.setFocusable(false);
        txtWaterTotal.setFocusable(false);
        
        // Declare the header titles of the JTable
        String[] columnNames = { "ID", "Unit #", "Tenant", "Rent", "Internet", "Electricity", "Water", "Month", "Year" };

        // Polymorphism; DatabaseUtility methods provides unique responses (called multiple times in the program)
        String query = "SELECT * FROM bill_tbl"; // SQL database query to fetch all bills

        // Abstraction; code for DatabaseUtility.fetchdata is hidden
        DefaultTableModel model = DatabaseUtility.fetchData(query, null, columnNames); // Call the method fetchData and store it in model

        // Set the model to the JTable (setter)
        tblContent.setModel(model);  // Populate the table with data from the database
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        main_pnl = new javax.swing.JPanel();
        title_lbl = new javax.swing.JLabel();
        lblRent = new javax.swing.JLabel();
        lblInternet = new javax.swing.JLabel();
        lblWater = new javax.swing.JLabel();
        lblElec = new javax.swing.JLabel();
        txtRent = new javax.swing.JTextField();
        txtInternet = new javax.swing.JTextField();
        lblUnit = new javax.swing.JLabel();
        txtUnit = new javax.swing.JTextField();
        txtWaterPrev = new javax.swing.JTextField();
        txtWaterCurr = new javax.swing.JTextField();
        txtWaterConsume = new javax.swing.JTextField();
        txtWaterRate = new javax.swing.JTextField();
        txtWaterTotal = new javax.swing.JTextField();
        txtWaterMonth = new javax.swing.JTextField();
        txtElecPrev = new javax.swing.JTextField();
        txtElecCurr = new javax.swing.JTextField();
        txtElecConsume = new javax.swing.JTextField();
        txtElecRate = new javax.swing.JTextField();
        txtElecTotal = new javax.swing.JTextField();
        txtElecMonth = new javax.swing.JTextField();
        btnWaterCalc = new javax.swing.JButton();
        btnElecCalc = new javax.swing.JButton();
        save_btn = new javax.swing.JButton();
        cancel_btn = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        cmbUnit = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblContent = new javax.swing.JTable();
        txtWaterYear = new javax.swing.JTextField();
        txtElecYear = new javax.swing.JTextField();
        lblPrev = new javax.swing.JLabel();
        lblCurr = new javax.swing.JLabel();
        lblConsume = new javax.swing.JLabel();
        lblRate = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        lblMonth = new javax.swing.JLabel();
        lblYear = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1536, 768));
        setName("main_jframe"); // NOI18N
        setResizable(false);

        main_pnl.setBackground(new java.awt.Color(255, 255, 255));
        main_pnl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        title_lbl.setFont(new java.awt.Font("Brush Script MT", 0, 48)); // NOI18N
        title_lbl.setText("              DueDeet Apartment");

        lblRent.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblRent.setText("Rent: ");

        lblInternet.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblInternet.setText("Internet: ");

        lblWater.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblWater.setText("Water: ");

        lblElec.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblElec.setText("Electricity: ");

        lblUnit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUnit.setText("Unit #: ");

        txtWaterConsume.setEditable(false);

        txtWaterTotal.setEditable(false);

        txtElecConsume.setEditable(false);

        txtElecTotal.setEditable(false);

        btnWaterCalc.setBackground(new java.awt.Color(204, 255, 255));
        btnWaterCalc.setForeground(new java.awt.Color(0, 0, 102));
        btnWaterCalc.setText("Calculate");
        btnWaterCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWaterCalcActionPerformed(evt);
            }
        });

        btnElecCalc.setBackground(new java.awt.Color(204, 255, 255));
        btnElecCalc.setForeground(new java.awt.Color(0, 0, 102));
        btnElecCalc.setText("Calculate");
        btnElecCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElecCalcActionPerformed(evt);
            }
        });

        save_btn.setBackground(new java.awt.Color(153, 255, 153));
        save_btn.setForeground(new java.awt.Color(0, 102, 51));
        save_btn.setText("Save");
        save_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_btnActionPerformed(evt);
            }
        });

        cancel_btn.setText("Cancel");
        cancel_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_btnActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 102, 102));
        btnDelete.setForeground(new java.awt.Color(153, 0, 0));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        cmbUnit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Unit 1", "Unit 2", "Unit 3", "Unit 4" }));
        cmbUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUnitActionPerformed(evt);
            }
        });

        tblContent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Unit #", "Name", "Rent", "Internet", "Electricity", "Water", "Month", "Year"
            }
        ));
        jScrollPane1.setViewportView(tblContent);

        lblPrev.setText("Previous Meter");

        lblCurr.setText("Current Meter");

        lblConsume.setText("Consumption");

        lblRate.setText("Rate");

        lblTotal.setText("Total");

        lblMonth.setText("Month");

        lblYear.setText("Year");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("SEARCH");

        javax.swing.GroupLayout main_pnlLayout = new javax.swing.GroupLayout(main_pnl);
        main_pnl.setLayout(main_pnlLayout);
        main_pnlLayout.setHorizontalGroup(
            main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_pnlLayout.createSequentialGroup()
                .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(main_pnlLayout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(main_pnlLayout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addGap(18, 18, 18)
                                .addComponent(btnEdit)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete)
                                .addGap(52, 52, 52)
                                .addComponent(cancel_btn)
                                .addGap(12, 12, 12)
                                .addComponent(save_btn))
                            .addGroup(main_pnlLayout.createSequentialGroup()
                                .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(main_pnlLayout.createSequentialGroup()
                                        .addComponent(lblUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(main_pnlLayout.createSequentialGroup()
                                        .addComponent(lblRent, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(txtRent, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(main_pnlLayout.createSequentialGroup()
                                        .addComponent(lblInternet, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(txtInternet, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(main_pnlLayout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(main_pnlLayout.createSequentialGroup()
                                                .addComponent(lblWater, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtWaterPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(main_pnlLayout.createSequentialGroup()
                                                .addComponent(lblElec, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtElecPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, main_pnlLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblPrev)
                                        .addGap(22, 22, 22)))
                                .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(main_pnlLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtWaterCurr, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtElecCurr, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(main_pnlLayout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(lblCurr)))
                                .addGap(18, 18, 18)
                                .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(main_pnlLayout.createSequentialGroup()
                                        .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtWaterConsume, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtElecConsume, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, main_pnlLayout.createSequentialGroup()
                                        .addComponent(lblConsume, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)))
                                .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtWaterRate, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtElecRate, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(main_pnlLayout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(lblRate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(main_pnlLayout.createSequentialGroup()
                                        .addGap(41, 41, 41)
                                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(68, 68, 68)
                                        .addComponent(lblMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(59, 59, 59)
                                        .addComponent(lblYear, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(main_pnlLayout.createSequentialGroup()
                                        .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(main_pnlLayout.createSequentialGroup()
                                                .addComponent(txtWaterTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(12, 12, 12)
                                                .addComponent(txtWaterMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtWaterYear, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(main_pnlLayout.createSequentialGroup()
                                                .addComponent(txtElecTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(12, 12, 12)
                                                .addComponent(txtElecMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtElecYear, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnWaterCalc)
                                            .addComponent(btnElecCalc)))))))
                    .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(main_pnlLayout.createSequentialGroup()
                            .addGap(1260, 1260, 1260)
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(cmbUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, main_pnlLayout.createSequentialGroup()
                            .addGap(146, 146, 146)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1248, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(16, 16, 16))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, main_pnlLayout.createSequentialGroup()
                .addGap(446, 446, 446)
                .addComponent(title_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE)
                .addGap(465, 465, 465))
        );
        main_pnlLayout.setVerticalGroup(
            main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_pnlLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(title_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 55, Short.MAX_VALUE)
                .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(main_pnlLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(main_pnlLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(lblPrev)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtWaterPrev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblWater))
                                .addGap(12, 12, 12)
                                .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtElecPrev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblElec)))
                            .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(main_pnlLayout.createSequentialGroup()
                                    .addComponent(lblConsume)
                                    .addGap(6, 6, 6)
                                    .addComponent(txtWaterConsume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(12, 12, 12)
                                    .addComponent(txtElecConsume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(main_pnlLayout.createSequentialGroup()
                                    .addComponent(lblCurr)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtWaterCurr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(12, 12, 12)
                                    .addComponent(txtElecCurr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(main_pnlLayout.createSequentialGroup()
                                    .addComponent(lblRate)
                                    .addGap(6, 6, 6)
                                    .addComponent(txtWaterRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(12, 12, 12)
                                    .addComponent(txtElecRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(main_pnlLayout.createSequentialGroup()
                                    .addComponent(btnWaterCalc)
                                    .addGap(12, 12, 12)
                                    .addComponent(btnElecCalc))
                                .addGroup(main_pnlLayout.createSequentialGroup()
                                    .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblYear)
                                        .addComponent(lblMonth)
                                        .addComponent(lblTotal))
                                    .addGap(6, 6, 6)
                                    .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtWaterTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtWaterMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtWaterYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(12, 12, 12)
                                    .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(txtElecMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtElecTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtElecYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, main_pnlLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(main_pnlLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(lblUnit))
                            .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(main_pnlLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(lblRent))
                            .addGroup(main_pnlLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(txtRent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(11, 11, 11)
                        .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(main_pnlLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(lblInternet))
                            .addGroup(main_pnlLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(txtInternet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(49, 49, 49)
                .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(cancel_btn)
                    .addGroup(main_pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(save_btn)
                        .addComponent(cmbUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main_pnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Method to ADD entry to the database
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // Container to store the names of tenants
        String[] tenant_name = {
            "James Smith",   
            "Sofia Rodriguez", 
            "David Garcia",   
            "Maria Hernandez", 
            "Matthew Johnson", 
            "Isabella Lopez",  
            "Carlos Perez",    
            "Emily Martinez",  
            "Juan Torres",     
            "Eva Sanchez"      
        };

        // Default values in case of empty fields
        int unit = 0;
        int rent = 0;
        int internet = 0;
        float waterPrev = 0f;
        float waterCurr = 0f;
        float waterRate = 0f;
        int waterMonth = 0;
        int waterYear = 0;
        float elecPrev = 0f;
        float elecCurr = 0f;
        float elecRate = 0f;
        int elecMonth = 0;
        int elecYear = 0;
   
        /**
         * Encapsulation (getters) with error handling
         */
        try {
            // Unit and rent fields
            // Encapsulation (getters)
            String unitText = txtUnit.getText().trim();
            if (!unitText.isEmpty()) unit = Integer.parseInt(unitText);

            String rentText = txtRent.getText().trim();
            if (!rentText.isEmpty()) rent = Integer.parseInt(rentText);

            String internetText = txtInternet.getText().trim();
            if (!internetText.isEmpty()) internet = Integer.parseInt(internetText);

            // Water fields
            String waterPrevText = txtWaterPrev.getText().trim();
            if (!waterPrevText.isEmpty()) waterPrev = Float.parseFloat(waterPrevText);

            String waterCurrText = txtWaterCurr.getText().trim();
            if (!waterCurrText.isEmpty()) waterCurr = Float.parseFloat(waterCurrText);

            String waterRateText = txtWaterRate.getText().trim();
            if (!waterRateText.isEmpty()) waterRate = Float.parseFloat(waterRateText);

            String waterMonthText = txtWaterMonth.getText().trim();
            if (!waterMonthText.isEmpty()) waterMonth = Integer.parseInt(waterMonthText);

            String waterYearText = txtWaterYear.getText().trim();
            if (!waterYearText.isEmpty()) waterYear = Integer.parseInt(waterYearText);

            // Electricity fields
            String elecPrevText = txtElecPrev.getText().trim();
            if (!elecPrevText.isEmpty()) elecPrev = Float.parseFloat(elecPrevText);

            String elecCurrText = txtElecCurr.getText().trim();
            if (!elecCurrText.isEmpty()) elecCurr = Float.parseFloat(elecCurrText);

            String elecRateText = txtElecRate.getText().trim();
            if (!elecRateText.isEmpty()) elecRate = Float.parseFloat(elecRateText);

            String elecMonthText = txtElecMonth.getText().trim();
            if (!elecMonthText.isEmpty()) elecMonth = Integer.parseInt(elecMonthText);

            String elecYearText = txtElecYear.getText().trim();
            if (!elecYearText.isEmpty()) elecYear = Integer.parseInt(elecYearText);

            // Calculate consumptions and bills
            float elecConsume = elecCurr - elecPrev;
            float waterConsume = waterCurr - waterPrev;
            float elecBill = elecConsume * elecRate;
            float waterBill = waterConsume * waterRate;

            // SQL query and execution for adding entry to water_tbl
            String queryWaterInsert = "INSERT INTO water_tbl (unit_id, previous, current, consumption, rate, total, month, year) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            Object[] valuesWater = {unit, waterPrev, waterCurr, waterConsume, waterRate, waterBill, waterMonth, waterYear};
            DatabaseUtility.mysqlQuery(queryWaterInsert, valuesWater); // Abstraction; code for DatabaseUtility.mysqlQuery is hidden
            
            // SQL query and execution for adding entry to electricity_tbl
            String queryElecInsert = "INSERT INTO electricity_tbl (unit_id, previous, current, consumption, rate, total, month, year) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            Object[] valuesElec = {unit, elecPrev, elecCurr, elecConsume, elecRate, elecBill, elecMonth, elecYear};
            DatabaseUtility.mysqlQuery(queryElecInsert, valuesElec); // Abstraction; code for DatabaseUtility.mysqlQuery is hidden
            
            // SQL query and execution for adding entry to bill_tbl
            String queryBillInsert = "INSERT INTO bill_tbl (unit_id, tenant_name, rent, internet, electricity, water, month, year) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            Object[] valuesBill = {unit, tenant_name[unit], rent, internet, waterBill, elecBill, waterMonth, waterYear};
            DatabaseUtility.mysqlQuery(queryBillInsert, valuesBill); // Abstraction; code for DatabaseUtility.mysqlQuery is hidden
             
            // Repopulating the JTable after adding an entry
            String[] columnNames = { "ID", "Unit #", "Tenant", "Rent", "Internet", "Electricity", "Water", "Month", "Year" };
            String query = "SELECT * FROM bill_tbl"; // Your query
            DefaultTableModel model = DatabaseUtility.fetchData(query, null, columnNames); // Abstraction; code for DatabaseUtility.fetchData is hidden
            // Set the model to the JTable
            tblContent.setModel(model);
            
        } catch (NumberFormatException e) {
            // Handle invalid input (non-numeric data in fields)
            JOptionPane.showMessageDialog(null, "Please enter valid numeric values.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Handle other potential errors
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        
        /**
         * Encapsulation; setters
         * Reset all textFields
         */
        txtUnit.setText("");
        txtRent.setText("");
        txtInternet.setText("");
        
        txtWaterPrev.setText("");
        txtWaterCurr.setText("");
        txtWaterConsume.setText("");
        txtWaterRate.setText("");
        txtWaterTotal.setText("");
        txtWaterMonth.setText("");
        txtWaterYear.setText("");
        
        txtElecPrev.setText("");
        txtElecCurr.setText("");
        txtElecConsume.setText("");
        txtElecRate.setText("");
        txtElecTotal.setText("");
        txtElecMonth.setText("");
        txtElecYear.setText("");
        
        txtWaterMonth.setEditable(true);
        txtWaterYear.setEditable(true);
        txtElecMonth.setEditable(true);
        txtElecYear.setEditable(true);
        txtUnit.setEditable(true);
        txtUnit.setFocusable(true);
        txtWaterMonth.setFocusable(true);
        txtWaterYear.setFocusable(true);
        txtElecMonth.setFocusable(true);
        txtElecYear.setFocusable(true);
        txtWaterMonth.setBackground(java.awt.Color.WHITE);
        txtElecMonth.setBackground(java.awt.Color.WHITE);
        txtWaterYear.setBackground(java.awt.Color.WHITE);
        txtElecYear.setBackground(java.awt.Color.WHITE);
    }//GEN-LAST:event_btnAddActionPerformed

    // Method to EDIT entry from the database
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int selectedRow = tblContent.getSelectedRow();  // Get the selected row index

        if (selectedRow != -1) {  // Check if a row is selected
            // Get values from the selected row
            int month = (int) tblContent.getValueAt(selectedRow, 7);  // Get the month as an integer
            int year = (int) tblContent.getValueAt(selectedRow, 8);  // Get the year as an integer
            int unit = (int) tblContent.getValueAt(selectedRow, 1); // Get the unit as an integer
            int rent = (int) tblContent.getValueAt(selectedRow, 3); // Get the rent as an integer
            int internet = (int) tblContent.getValueAt(selectedRow, 4); // Get the internet as an integer
            
            // SQL query to fetch the specific row selected from the JTable
            String water_query = "SELECT * FROM water_tbl WHERE month = ? AND year = ? AND unit_id = ?";
            // Fetch data from the database using the selected month and year
            List<Object[]> water = DatabaseUtility.fetchDataWithWhere(water_query, month, year, unit); // Abstraction; storing the query result to water variable

            // Assuming only one row to match, handle the first result
            if (!water.isEmpty()) {
                Object[] rowData = water.get(0);  // Get the first (and possibly only) row

                // Store the values from the row into variables
                float waterPrev = Float.parseFloat(rowData[2].toString());
                float waterCurr = Float.parseFloat(rowData[3].toString());
                float waterConsume = Float.parseFloat(rowData[4].toString());
                float waterRate = Float.parseFloat(rowData[5].toString());
                float waterBill = Float.parseFloat(rowData[6].toString());
                int waterMonth = Integer.parseInt(rowData[7].toString());
                int waterYear = Integer.parseInt(rowData[8].toString());

                // Variables for display (e.g., display them in text fields)
                txtUnit.setText(String.valueOf(unit));
                txtWaterPrev.setText(String.valueOf(waterPrev));
                txtWaterCurr.setText(String.valueOf(waterCurr));
                txtWaterConsume.setText(String.valueOf(waterConsume));
                txtWaterRate.setText(String.valueOf(waterRate));
                txtWaterTotal.setText(String.valueOf(waterBill));
                txtWaterMonth.setText(String.valueOf(waterMonth));
                txtWaterYear.setText(String.valueOf(waterYear));
                
                txtWaterMonth.setEditable(false);
                txtWaterYear.setEditable(false);
                txtWaterMonth.setFocusable(false);
                txtWaterYear.setFocusable(false);
            }
            
            // SQL query to fetch the specific row selected from the JTable
            String elec_query = "SELECT * FROM electricity_tbl WHERE month = ? AND year = ? AND unit_id = ?";
            // Fetch data from the database using the selected month and year
            List<Object[]> elec = DatabaseUtility.fetchDataWithWhere(elec_query, month, year, unit); // Abstraction; code for DatabaseUtility.fetchDataWithWhere is hidden

            // Assuming only one row to match, handle the first result
            if (!water.isEmpty()) {
                Object[] rowData = elec.get(0);  // Get the first (and possibly only) row

                // Store the values from the row into variables
                float elecPrev = Float.parseFloat(rowData[2].toString());
                float elecCurr = Float.parseFloat(rowData[3].toString());
                float elecConsume = Float.parseFloat(rowData[4].toString());
                float elecRate = Float.parseFloat(rowData[5].toString());
                float elecBill = Float.parseFloat(rowData[6].toString());
                int elecMonth = Integer.parseInt(rowData[7].toString());
                int elecYear = Integer.parseInt(rowData[8].toString());

                // Variables for display (e.g., display them in text fields)
                txtElecPrev.setText(String.valueOf(elecPrev));
                txtElecCurr.setText(String.valueOf(elecCurr));
                txtElecConsume.setText(String.valueOf(elecConsume));
                txtElecRate.setText(String.valueOf(elecRate));
                txtElecTotal.setText(String.valueOf(elecBill));
                txtElecMonth.setText(String.valueOf(elecMonth));
                txtElecYear.setText(String.valueOf(elecYear));
                
                txtElecMonth.setEditable(false);
                txtElecYear.setEditable(false);
                txtElecMonth.setFocusable(false);
                txtElecYear.setFocusable(false);
            }
            txtRent.setText(String.valueOf(rent));
            txtInternet.setText(String.valueOf(internet));
            txtUnit.setEditable(false);
            txtUnit.setFocusable(false);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    // Method to DELETE entry from the database
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tblContent.getSelectedRow();  // Get the selected row index

        if (selectedRow != -1) {  // Check if a row is selected
            // Get values from the selected row
            int month = (int) tblContent.getValueAt(selectedRow, 7);  
            int year = (int) tblContent.getValueAt(selectedRow, 8);  
            int unit = (int) tblContent.getValueAt(selectedRow, 1);
            int id = (int) tblContent.getValueAt(selectedRow, 0);
            
            // SQL query and execution for deleting entry to water_tbl
            String queryDeleteWater = "DELETE FROM water_tbl WHERE month = ? AND year = ? AND unit_id = ?";
            Object[] water_values = {month, year, unit};
            DatabaseUtility.mysqlQuery(queryDeleteWater, water_values); // Abstraction; code for DatabaseUtility.mysqlQuery is hidden
            
            // SQL query and execution for deleting entry to electricity_tbl
            String queryDeleteElec = "DELETE FROM electricity_tbl WHERE month = ? AND year = ? AND unit_id = ?";
            Object[] elec_values = {month, year, unit};
            DatabaseUtility.mysqlQuery(queryDeleteElec, elec_values); // Abstraction; code for DatabaseUtility.mysqlQuery is hidden
            
            // SQL query and execution for deleting entry to bill_tbl
            String queryDeleteBill = "DELETE FROM bill_tbl WHERE bill_id = ?";
            Object[] bill_values = {id};
            DatabaseUtility.mysqlQuery(queryDeleteBill, bill_values); // Abstraction; code for DatabaseUtility.mysqlQuery is hidden
        }
        // Repopulating the JTable after deleting an entry
        String[] columnNames = { "ID", "Unit #", "Tenant", "Rent", "Internet", "Electricity", "Water", "Month", "Year" };
        String query = "SELECT * FROM bill_tbl"; 
        DefaultTableModel model = DatabaseUtility.fetchData(query, null, columnNames); // Abstraction; code for DatabaseUtility.mysqlQuery is hidden
        tblContent.setModel(model);  
        
        /**
         * Encapsulation; setters
         * Reset all textFields
         */
        txtWaterMonth.setEditable(true);
        txtWaterYear.setEditable(true);
        txtElecMonth.setEditable(true);
        txtElecYear.setEditable(true);
        txtUnit.setEditable(true);
        txtUnit.setFocusable(true);
        txtWaterMonth.setFocusable(true);
        txtWaterYear.setFocusable(true);
        txtElecMonth.setFocusable(true);
        txtElecYear.setFocusable(true);
    }//GEN-LAST:event_btnDeleteActionPerformed

    // Method to UPDATE entry from the database
    private void save_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_btnActionPerformed
        int selectedRow = tblContent.getSelectedRow();  // Get the selected row index
        
        // Set the default value for bill_id and unit number
        int bill_id = 0;
        int unit = 0;
        
        if (selectedRow != -1) {  // Check if a row is selected
            // Get values from the selected row
            bill_id = (int) tblContent.getValueAt(selectedRow, 0);  // Get the month as an integer
            unit = (int) tblContent.getValueAt(selectedRow, 1); // Get the unit as an integer
        }
        
        // Names of the tenant
        String[] tenant_name = {
            "James Smith",   
            "Sofia Rodriguez", 
            "David Garcia",   
            "Maria Hernandez", 
            "Matthew Johnson", 
            "Isabella Lopez",  
            "Carlos Perez",    
            "Emily Martinez",  
            "Juan Torres",     
            "Eva Sanchez"      
        };

        // Default values in case of empty fields
        int rent = 0;
        int internet = 0;
        float waterPrev = 0f;
        float waterCurr = 0f;
        float waterRate = 0f;
        int waterMonth = 0;
        int waterYear = 0;
        float elecPrev = 0f;
        float elecCurr = 0f;
        float elecRate = 0f;
        int elecMonth = 0;
        int elecYear = 0;

        /**
         * Encapsulation (getters) with error handling
         */
        try {
            // Unit and rent fields
            String unitText = txtUnit.getText().trim();
            if (!unitText.isEmpty()) unit = Integer.parseInt(unitText);

            String rentText = txtRent.getText().trim();
            if (!rentText.isEmpty()) rent = Integer.parseInt(rentText);

            String internetText = txtInternet.getText().trim();
            if (!internetText.isEmpty()) internet = Integer.parseInt(internetText);

            // Water fields
            String waterPrevText = txtWaterPrev.getText().trim();
            if (!waterPrevText.isEmpty()) waterPrev = Float.parseFloat(waterPrevText);

            String waterCurrText = txtWaterCurr.getText().trim();
            if (!waterCurrText.isEmpty()) waterCurr = Float.parseFloat(waterCurrText);

            String waterRateText = txtWaterRate.getText().trim();
            if (!waterRateText.isEmpty()) waterRate = Float.parseFloat(waterRateText);

            String waterMonthText = txtWaterMonth.getText().trim();
            if (!waterMonthText.isEmpty()) waterMonth = Integer.parseInt(waterMonthText);

            String waterYearText = txtWaterYear.getText().trim();
            if (!waterYearText.isEmpty()) waterYear = Integer.parseInt(waterYearText);

            // Electricity fields
            String elecPrevText = txtElecPrev.getText().trim();
            if (!elecPrevText.isEmpty()) elecPrev = Float.parseFloat(elecPrevText);

            String elecCurrText = txtElecCurr.getText().trim();
            if (!elecCurrText.isEmpty()) elecCurr = Float.parseFloat(elecCurrText);

            String elecRateText = txtElecRate.getText().trim();
            if (!elecRateText.isEmpty()) elecRate = Float.parseFloat(elecRateText);

            String elecMonthText = txtElecMonth.getText().trim();
            if (!elecMonthText.isEmpty()) elecMonth = Integer.parseInt(elecMonthText);

            String elecYearText = txtElecYear.getText().trim();
            if (!elecYearText.isEmpty()) elecYear = Integer.parseInt(elecYearText);

            // Calculate consumptions and bills
            float elecConsume = elecCurr - elecPrev;
            float waterConsume = waterCurr - waterPrev;
            float elecBill = elecConsume * elecRate;
            float waterBill = waterConsume * waterRate;

            // SQL query and execution for updating entry to water_tbl
            String queryWaterUpdate = "UPDATE water_tbl SET previous = ?, current = ?, consumption = ?, rate = ?, total = ? WHERE  month = ? AND year = ? AND unit_id = ?";
            Object[] valuesWater = {waterPrev, waterCurr, waterConsume, waterRate, waterBill, waterMonth, waterYear, unit};
            DatabaseUtility.mysqlQuery(queryWaterUpdate, valuesWater); // Abstraction; code for DatabaseUtility.mysqlQuery is hidden

            // SQL query and execution for updating entry to electricity_tbl
            String queryElecUpdate = "UPDATE electricity_tbl SET previous = ?, current = ?, consumption = ?, rate = ?, total = ? WHERE  month = ? AND year = ? AND unit_id = ?";
            Object[] valuesElec = {elecPrev, elecCurr, elecConsume, elecRate, elecBill, elecMonth, elecYear, unit};
            DatabaseUtility.mysqlQuery(queryElecUpdate, valuesElec); // Abstraction; code for DatabaseUtility.mysqlQuery is hidden

            // SQL query and execution for updating entry to bill_tbl
            String queryBillUpdate = "UPDATE bill_tbl SET tenant_name = ?, rent = ?, internet = ?, electricity = ?, water = ? WHERE  bill_id = ?";
            Object[] valuesBill = {tenant_name[unit], rent, internet, elecBill, waterBill, bill_id};
            DatabaseUtility.mysqlQuery(queryBillUpdate, valuesBill); // Abstraction; code for DatabaseUtility.mysqlQuery is hidden
            
            // Repopulating the JTable after updating an entry
            String[] columnNames = { "ID", "Unit #", "Tenant", "Rent", "Internet", "Electricity", "Water", "Month", "Year" };
            String query = "SELECT * FROM bill_tbl"; // Your query
            DefaultTableModel model = DatabaseUtility.fetchData(query, null, columnNames); // Abstraction; code for DatabaseUtility.mysqlQuery is hidden
            tblContent.setModel(model);
            
        } catch (NumberFormatException e) {
            // Handle invalid input (non-numeric data in fields)
            JOptionPane.showMessageDialog(null, "Please enter valid numeric values.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Handle other potential errors
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        /**
         * Encapsulation; setters
         * Reset all textFields to empty
         */
        txtUnit.setText("");
        txtRent.setText("");
        txtInternet.setText("");
        
        txtWaterPrev.setText("");
        txtWaterCurr.setText("");
        txtWaterConsume.setText("");
        txtWaterRate.setText("");
        txtWaterTotal.setText("");
        txtWaterMonth.setText("");
        txtWaterYear.setText("");
        
        txtElecPrev.setText("");
        txtElecCurr.setText("");
        txtElecConsume.setText("");
        txtElecRate.setText("");
        txtElecTotal.setText("");
        txtElecMonth.setText("");
        txtElecYear.setText("");
        
        txtWaterMonth.setEditable(true);
        txtWaterYear.setEditable(true);
        txtElecMonth.setEditable(true);
        txtElecYear.setEditable(true);
        txtUnit.setEditable(true);
        txtUnit.setFocusable(true);
        txtWaterMonth.setFocusable(true);
        txtWaterYear.setFocusable(true);
        txtElecMonth.setFocusable(true);
        txtElecYear.setFocusable(true);
    }//GEN-LAST:event_save_btnActionPerformed

    // Method to FILTER the Jtable contents based on unit number
    private void cmbUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUnitActionPerformed
        // Setting the table header titles
        String[] columnNames = { "ID", "Unit #", "Tenant", "Rent", "Internet", "Electricity", "Water", "Month", "Year" };
        String query; 
        Object[][] data = {}; // Empty data for a blank table
        DefaultTableModel model;
        
        String unitSelected = (String) cmbUnit.getSelectedItem();
        System.out.println(unitSelected);
        int searchUnit = 0;
        
        // Polymorphism; switch-case; unitSelected overriding
        searchUnit = switch (unitSelected) {
            case "Unit 1" -> 1;
            case "Unit 2" -> 2;
            case "Unit 3" -> 3;
            case "Unit 4" -> 4;
            default -> 0;
        };
        System.out.println(searchUnit);
        
        // Polymorphism; switch-case; query and model overriding
        switch (unitSelected) {
            case "Unit 1":
                query = "SELECT * FROM bill_tbl WHERE unit_id = 1"; 
                model = DatabaseUtility.fetchData(query, null, columnNames); // Abstraction; code for DatabaseUtility.mysqlQuery is hidden

                // Set the model to the JTable
                tblContent.setModel(model);  
                break;
            case "Unit 2":
                query = "SELECT * FROM bill_tbl WHERE unit_id = 2"; // Your query
                model = DatabaseUtility.fetchData(query, null, columnNames); // Abstraction

                // Set the model to the JTable
                tblContent.setModel(model);  // Replace 'yourJTable' with your actual JTable variable
                break;
            case "Unit 3":
                query = "SELECT * FROM bill_tbl WHERE unit_id = 3"; // Your query
                model = DatabaseUtility.fetchData(query, null, columnNames); // Abstraction

                // Set the model to the JTable
                tblContent.setModel(model);  // Replace 'yourJTable' with your actual JTable variable
                break;
            case "Unit 4":
                query = "SELECT * FROM bill_tbl WHERE unit_id = 4"; // Your query
                model = DatabaseUtility.fetchData(query, null, columnNames); // Abstraction; code for DatabaseUtility.fetchdata is hidden

                // Set the model to the JTable
                tblContent.setModel(model);  // Replace 'yourJTable' with your actual JTable variable
                break;
            default:
                query = "SELECT * FROM bill_tbl"; // Your query
                model = DatabaseUtility.fetchData(query, null, columnNames); // Abstraction; code for DatabaseUtility.fetchdata is hidden

                // Set the model to the JTable
                tblContent.setModel(model);  // Replace 'yourJTable' with your actual JTable variable
        }
    }//GEN-LAST:event_cmbUnitActionPerformed

    // Method to clear all textFields
    private void cancel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_btnActionPerformed
        /**
         * Encapsulation; setters
         * Reset all textFields
         */
        txtUnit.setText("");
        txtRent.setText("");
        txtInternet.setText("");
        
        txtWaterPrev.setText("");
        txtWaterCurr.setText("");
        txtWaterConsume.setText("");
        txtWaterRate.setText("");
        txtWaterTotal.setText("");
        txtWaterMonth.setText("");
        txtWaterYear.setText("");
        
        txtElecPrev.setText("");
        txtElecCurr.setText("");
        txtElecConsume.setText("");
        txtElecRate.setText("");
        txtElecTotal.setText("");
        txtElecMonth.setText("");
        txtElecYear.setText("");
        
        txtWaterMonth.setEditable(true);
        txtWaterYear.setEditable(true);
        txtElecMonth.setEditable(true);
        txtElecYear.setEditable(true);
        txtUnit.setEditable(true);
        txtUnit.setFocusable(true);
        txtWaterMonth.setFocusable(true);
        txtWaterYear.setFocusable(true);
        txtElecMonth.setFocusable(true);
        txtElecYear.setFocusable(true);
    }//GEN-LAST:event_cancel_btnActionPerformed

    // Method to calculate water bill
    private void btnWaterCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWaterCalcActionPerformed
        // Set the initial values for calculation
        float waterPrev = 0f;
        float waterCurr = 0f;
        float waterRate = 0f;
        
        /**
         * Encapsulation (getters) with error handling
         */
        try {
            // Water fields
            String waterPrevText = txtWaterPrev.getText().trim();
            if (!waterPrevText.isEmpty()) waterPrev = Float.parseFloat(waterPrevText);

            String waterCurrText = txtWaterCurr.getText().trim();
            if (!waterCurrText.isEmpty()) waterCurr = Float.parseFloat(waterCurrText);

            String waterRateText = txtWaterRate.getText().trim();
            if (!waterRateText.isEmpty()) waterRate = Float.parseFloat(waterRateText);

        } catch (NumberFormatException e) {
            // Handle invalid input (non-numeric data in fields)
            JOptionPane.showMessageDialog(null, "Please enter valid numeric values.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Handle other potential errors
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        // Calculate consumptions and bills     
        float waterConsume = waterCurr - waterPrev;
        float waterBill = waterConsume * waterRate;
        
        // Set the calculated text
        txtWaterConsume.setText(String.valueOf(waterConsume));
        txtWaterTotal.setText(String.valueOf(waterBill));
    }//GEN-LAST:event_btnWaterCalcActionPerformed

    // Method to calculate electricity bill
    private void btnElecCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElecCalcActionPerformed
         // Set the initial values for calculation
        float elecPrev = 0f;
        float elecCurr = 0f;
        float elecRate = 0f;
        
        /**
         * Encapsulation (getters) with error handling
         */
        try {
            // Water fields
            String elecPrevText = txtElecPrev.getText().trim();
            if (!elecPrevText.isEmpty()) elecPrev = Float.parseFloat(elecPrevText);

            String elecCurrText = txtElecCurr.getText().trim();
            if (!elecCurrText.isEmpty()) elecCurr = Float.parseFloat(elecCurrText);

            String elecRateText = txtElecRate.getText().trim();
            if (!elecRateText.isEmpty()) elecRate = Float.parseFloat(elecRateText);

        } catch (NumberFormatException e) {
            // Handle invalid input (non-numeric data in fields)
            JOptionPane.showMessageDialog(null, "Please enter valid numeric values.", "Input Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Handle other potential errors
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        // Calculate consumptions and bills  
        float elecConsume = elecCurr - elecPrev;
        float elecBill = elecConsume * elecRate;
        
        // Set the calculated text
        txtElecConsume.setText(String.valueOf(elecConsume));
        txtElecTotal.setText(String.valueOf(elecBill));
    }//GEN-LAST:event_btnElecCalcActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnElecCalc;
    private javax.swing.JButton btnWaterCalc;
    private javax.swing.JButton cancel_btn;
    private javax.swing.JComboBox<String> cmbUnit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblConsume;
    private javax.swing.JLabel lblCurr;
    private javax.swing.JLabel lblElec;
    private javax.swing.JLabel lblInternet;
    private javax.swing.JLabel lblMonth;
    private javax.swing.JLabel lblPrev;
    private javax.swing.JLabel lblRate;
    private javax.swing.JLabel lblRent;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblUnit;
    private javax.swing.JLabel lblWater;
    private javax.swing.JLabel lblYear;
    private javax.swing.JPanel main_pnl;
    private javax.swing.JButton save_btn;
    private javax.swing.JTable tblContent;
    private javax.swing.JLabel title_lbl;
    private javax.swing.JTextField txtElecConsume;
    private javax.swing.JTextField txtElecCurr;
    private javax.swing.JTextField txtElecMonth;
    private javax.swing.JTextField txtElecPrev;
    private javax.swing.JTextField txtElecRate;
    private javax.swing.JTextField txtElecTotal;
    private javax.swing.JTextField txtElecYear;
    private javax.swing.JTextField txtInternet;
    private javax.swing.JTextField txtRent;
    private javax.swing.JTextField txtUnit;
    private javax.swing.JTextField txtWaterConsume;
    private javax.swing.JTextField txtWaterCurr;
    private javax.swing.JTextField txtWaterMonth;
    private javax.swing.JTextField txtWaterPrev;
    private javax.swing.JTextField txtWaterRate;
    private javax.swing.JTextField txtWaterTotal;
    private javax.swing.JTextField txtWaterYear;
    // End of variables declaration//GEN-END:variables
}
